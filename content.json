{"meta":{"title":"Allencatの博客","subtitle":"一个小孩闲来无事的尝试","description":"","author":"Allencat","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2025-01-08T04:17:35.000Z","updated":"2025-01-08T04:17:35.328Z","comments":true,"path":"about/index-1.html","permalink":"http://example.com/about/index-1.html","excerpt":"","text":""},{"title":"about","date":"2025-01-07T08:12:28.000Z","updated":"2025-01-07T08:12:28.656Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2025-01-07T08:12:09.000Z","updated":"2025-01-07T08:12:09.892Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2025-01-08T04:16:28.000Z","updated":"2025-01-08T04:16:28.599Z","comments":true,"path":"categories/index-1.html","permalink":"http://example.com/categories/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2025-01-07T08:09:36.000Z","updated":"2025-01-07T08:09:36.376Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2025-01-08T04:17:18.000Z","updated":"2025-01-08T04:17:18.404Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2025-01-07T07:20:11.000Z","updated":"2025-01-08T07:16:10.241Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"数据库学习","slug":"数据库学习","date":"2025-01-08T07:15:10.000Z","updated":"2025-01-08T07:18:47.858Z","comments":true,"path":"2025/01/08/数据库学习/","permalink":"http://example.com/2025/01/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"数据库SQL：DDL查询所有数据库：注意databases 1SHOW DATABASES; 查询当前数据库： 1SELECT DATABASE(); 创建数据库: 1CREATE DATABASE[数据库名][字符集][排列规则]; 如果重复执行时会报错，数据库已经存在就不能重复存在建字符串类型的时候用varchar 后面必须加()注明长度删除数据库： 1DROP DATABASE [数据库名]; 使用数据库：USE 数据库 DDL-表操作-查询查询当前数据库中的所有表： 1SHOW TABLES; 查询表结构： 1DESC 表名; 查询指定表的建表语句 1SHOW CREATE TABLE 表名; DDL-表操作-数据类型数值类型 TINYINT SMALLINT 类似于short INT 0～4294967295 BIGINT 0～2^64-1 FLOAT 单精度浮点数 DOUBLE 双精度浮点数 score double(4,1)表示一个double类型，整体长度是4,小数部分的 长度为1位 DECIMAL文本类型 CHAR 定长字符串 性能高 VARCHAR 变长字符串 性能较差 TEXT 长文本数据 BLOB 二进制形式的长文本数据日期类型 DATE 日期值 TIME 时间值 YEAR 年份 DATETIME 混合日期和时间值 DDL-表操作-修改添加字段： 1ALTER TABLE 表名 字段名 类型（长度）; 修改字段修改数据类型 1ALTER TABLE 表名 MODIFY 字段名 新数据类型; 修改字段名和字段类型 1ALTER TABELE 表名 CHANGE 旧字段名 新字段名 类型; 删除字段： 1ALTER TABLE 表名 DROP 字段名; 修改表名： 1ALTER TABLE 表名 RENAME TO 新表名; 删除指定表，并重新创建，重置该表： 1TRUNCATE TABLE 表名; DML-增-删-改DML-添加数据-insert1INSERT INTO 表名（字段1,字段2）VALUES（值1,值2）; 字段1对应值1,如果要进行多个值同时插入，（）间用,分割。 DML-修改数据-updata1UPDATE 表名 SET 字段名=值1,字段名2=值2,……[WHERE 条件] 条件比如说id&#x3D;1,也就是id为1的数据进行修改 DML删除数据1DELETE FROM 表名 [WHERE 条件] 注意：DELETE中语句的条件可以有也可以没有，如果没有条件，则会删除整张表的所有数据不可以删除某一个字段的值 DQL-数据查询语言关键字-SELECT可以分为以下部分： 1.基础查询1SELECT 字段1, 字段2, 字段3 ... FROM 表名 ; 去除重复记录： 1SELECT DISTINCT 字段列表 FROM 表名; 2.条件查询1SELECT 字段列表 FROM 表名 WHERE 条件列表 ; 比较运算符&lt; &gt; &#x3D; &lt;&#x3D; &gt;&#x3D; !&#x3D; IS NULL LIKE(占位符）逻辑运算符AND OR NOTeg: 1234select * from emp where age between 15 and 20;select * from emp where gender = &#x27;女&#x27; and age &lt; 25;select * from emp where age in(18,20,40);select * from emp where idcard like &#x27;_________________X&#x27;;//查询身份证号最后一位是X的员工信息 3.聚合函数将一列数据作为一个整体，进行纵向计算 1SELECT 聚合函数(字段列表) FROM 表名 ; 常见的聚合函数：count（统计数量） max min avg(平均数） sum 1select max(age) from emp; 4.分组查询1SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后过滤条件 ]; where与having区别 执行时机不同： where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。 判断条件不同： where不能对聚合函数进行判断，而having可以。 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址 12select workaddress, count(*) address_count from emp where age &lt; 45 group byworkaddress having address_count &gt;= 3; 5.排序查询-order by1SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ; ASC 升序 DESC 降序 12select * from emp order by age asc;select * from emp order by age; 6.分页查询1SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ; eg: 12select * from emp limit 0,10;select * from emp limit 10; 编写顺序select –&gt;字段列表–&gt;from –&gt;表名列表 –&gt;where –&gt;条件列表–&gt;group by–&gt;分组字段列表–&gt; having–&gt;分组后条件列表–&gt;order by –&gt;排序字段列表–&gt;limit –&gt;分页参数 eg: 12345select tmp.t1 person1,tmp.t2 person2,count(*) call_count,sum(tmp.duration) total_durationfrom (select if(from_id&gt;to_id,to_id,from_id) t1,if(from_id&gt;to_id,from_id,to_id) t2,duration from calls) tmpgroup by tmp.t1,tmp.t2 tmp.t1是一个临时的分组，表示的是一列，新表的一列，然而person1是这列的名字，相当于t1是这个新表名叫person1这列的一个指针，指向的是person1这列的内容而if(from_id&gt;to_id,to_id,from_id） 是一个条件的判断，是指如果from_id&gt;to_id,则返回to_id,若为假则返回from_id DCL-数据控制语言可以控制数据库可以由谁访问以及谁可以访问哪些数据库 用户管理权限控制函数字符串函数：Mysql函数大全字符串函数：链接，转换，去除空格，截取等数值函数，日期函数，流程函数 约束目的：保证数据库中数据的正确性，有效性，完整性分类：非空约束 NOT NULL唯一约束： UNIQUE unique主键约束：PRIMARY KEY primary key默认约束：DEFAULT default外键约束：FOREIGN KEY foreign key检查约束：CHECK check可以完成表结构的创建 ：字段名 数据类型 约束关键字外键约束：让两张表之间建立链接，从而保证一致性和完整性，外键是’某个表 A’中的’一列 column’,它包含在’另一个表 B’的’主键’中格式： 1alter table emp add constraint fk_emp_dept_id foreign key (dept_id) reference dept(id); 这条语句的作用是在 emp 表上添加一个名为 fk_emp_dept_id 的外键约束，该外键约束基于 emp 表中的 dept_id 列，并指向 dept 表中的 id 列。 多表关系一对多 在多的表中一列建立外键约束多对多 建立第三张中间表，中间至少包含两个外键，分别关联两方主键一对一 将表拆分为多表，并设置唯一外键 多表查询：需要消除无效的笛卡尔积连接查询：内连接 外连接 1234select sname from s where not exists(select * from scWhere sno=s.sno and cno=&#x27;002&#x27;) 所有不存在这条记录的学生被返回 unique index 唯一索引binary column 1234567891011SUM(score_points) OVER (PARTITION BY gender ORDER BY day) 是 SQL 中窗口函数的用法，它结合了聚合函数和窗口函数的概念。下面是它的作用和用法的分解：语法解析SUM(score_points):是一个聚合函数，用于计算 score_points 列的累积和。OVER 子句:定义了窗口范围，即在哪些数据行上应用聚合函数。PARTITION BY gender:将数据按 gender 列分组（类似于 GROUP BY，但不会减少结果行数）。每个 gender 的分组内分别计算。ORDER BY day:指定窗口内的行按 day 列排序，从而实现有序累加。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Hello World","slug":"hello-world","date":"2025-01-02T09:09:11.980Z","updated":"2025-01-02T09:09:11.981Z","comments":true,"path":"2025/01/02/hello-world/","permalink":"http://example.com/2025/01/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}